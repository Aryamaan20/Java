

import java.nio.file.*;

public class FileWatcherExample {

    public static void main(String[] args) throws Exception {
        // Define the file to watch
        Path filePath = Paths.get("file_to_watch.txt");

        // Create a WatchService
        WatchService watchService = FileSystems.getDefault().newWatchService();

        // Register the directory containing the file
        Path parentDir = filePath.getParent();
        if (parentDir != null) {
            parentDir.register(watchService, StandardWatchEventKinds.ENTRY_MODIFY);
        } else {
            System.err.println("Unable to register watch service. No parent directory found.");
            return;
        }

        // Get the initial content of the file
        StringBuilder previousContent = readContentFromFile(filePath);

        // Start watching for events
        System.out.println("Watching for file changes...");
        while (true) {
            // Wait for file system events
            WatchKey key;
            try {
                key = watchService.take();
            } catch (InterruptedException ex) {
                return;
            }

            // Check for events
            for (WatchEvent<?> event : key.pollEvents()) {
                if (event.kind() == StandardWatchEventKinds.ENTRY_MODIFY) {
                    @SuppressWarnings("unchecked")
                    WatchEvent<Path> ev = (WatchEvent<Path>) event;
                    Path changedFile = ev.context();
                    if (changedFile != null && changedFile.equals(filePath.getFileName())) {
                        System.out.println("File modified: " + filePath);
                        // Read and print the new lines added to the file
                        StringBuilder currentContent = readContentFromFile(filePath);
                        printNewContent(previousContent, currentContent);
                        previousContent = currentContent;
                    }
                }
            }

            // Reset the key
            boolean valid = key.reset();
            if (!valid) {
                break;
            }
        }
    }

    private static StringBuilder readContentFromFile(Path filePath) {
        StringBuilder content = new StringBuilder();
        try (BufferedReader reader = Files.newBufferedReader(filePath)) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return content;
    }

    private static void printNewContent(StringBuilder previousContent, StringBuilder currentContent) {
        String[] previousLines = previousContent.toString().split("\n");
        String[] currentLines = currentContent.toString().split("\n");

        for (String line : currentLines) {
            boolean isNewLine = true;
            for (String prevLine : previousLines) {
                if (line.equals(prevLine)) {
                    isNewLine = false;
                    break;
                }
            }
            if (isNewLine) {
                System.out.println(line);
            }
        }
    }
}
